/*
COMP30240 Multi Agent Systems Project 2021-2022

Students:
John Engracio 18452452
Tom Furlong 18366263

*/

agent Zone1 {
    types stuff {
        formula strat1(boolean);
        formula strat2(boolean);
        formula strat3(boolean);
        formula strat4(boolean);
    }

    initial strat1(false);
    initial strat2(false);
    initial strat3(false);
    initial strat4(false);

    module Console C;
    module System S;
	module EIS ei;
    module Debug debug;

    rule +!main([string bot]) {
        C.println(bot + " for Zone 1!");
        ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
        ei.join();
        ei.link(bot);
		S.sleep(800);
        !start(bot);
    }

    rule +!start(string Cleaner) : ei.location(int X, int Y) {
		ei.light("on");

        while (strat1(false)) {
            S.sleep(500);
            !beginStrategy();
        }
        
        while (strat2(false)) {
            S.sleep(500);
            !beginStrategy2();
        }

        while (strat3(false)) {
            S.sleep(500);
            !beginStrategy3();
        }

        while (strat4(false)) {
            S.sleep(500);
            !beginStrategy4();
        }

        C.println("Zone 1 cleaning complete!");
		ei.light("off");
	}

    /*
    Strategy 1:
    Get to starting position in terms of X coordinates.
    */
    rule +!beginStrategy() : ei.location(int X, int Y) {
        ei.clean();
        if (X == 0) {
            if (Y < 0)
                ei.move("south", 0);
            else if (Y > 0)
                ei.move("north", 0);
            C.println("Strat 1 complete.");
            -strat1(false);
            +strat1(true);
        } else {
            if (ei.square("forward", "obstacle") | ei.square("forward", "vac")) {
                !checkNextMove();
            }

            if (Y < 0 & ~ei.square("south", "obstacle") | ~ei.square("south", "vac")) {
                ei.move("south", 1);
            } else {
                ei.move("west", 1);
            }

            if (ei.square("forward", "obstacle") & X == 1) {
                C.println("Strat 1 finished...");
                -strat1(false);
                +strat1(true);
            }
        }
    }

    /*
    Strategy 2:
    Get to starting position in terms of Y coordinates.
    */
    rule +!beginStrategy2() : ei.location(int X, int Y) {
        ei.clean();
        if (Y == 0) {
            C.println("Strat 2 complete.");
            ei.move("east", 0);
            -strat2(false);
            +strat2(true);
        } else {
            if (ei.square("forward", "obstacle") | ei.square("forward", "vac")) {
                !checkNextMove();
            }
            
            if (Y < 0) {
                ei.move("south", 1);
            } else if (Y > 0) {
                ei.move("north", 1);
            }

            if (ei.square("forward", "obstacle") & Y == 1) {
                C.println("Strat 2 finished...");
                -strat2(false);
                +strat2(true);
            }
        }
    }

    /*
    Strategy 3:
    Get to the other side of the board
    */
    rule +!beginStrategy3() : ei.location(int X, int Y) {
        ei.clean();
        if (X == 15) {
            C.println("Strat 3 complete.");
            ei.move("south", 0);
            -strat3(false);
            +strat3(true);
        } else {
            if (ei.square("forward", "obstacle") | ei.square("forward", "vac")) {
                !checkNextMove();
            }

            if (Y < 0 & ~ei.square("south", "obstacle") | ~ei.square("south", "vac")) {
                ei.move("south", 1);
            } else if (Y > 0 & ~ei.square("north", "obstacle") | ~ei.square("north", "vac")) {
                ei.move("north", 1);
            } else {
                ei.move("east", 1);
            }
        }
    }

    /*
    Strategy 4:
    Go to the next row of cells to clean and go back to the other side of the board
    */
    rule +!beginStrategy4() : ei.location(int X, int Y) {
        ei.clean();
        if (X == 0) {
            C.println("Strat 4 complete.");
            -strat4(false);
            +strat4(true);
        } else {
            if (ei.square("forward", "obstacle") | ei.square("forward", "vac")) {
                !checkNextMove();
            }

            if (Y < 1 & ~ei.square("south", "obstacle") | ~ei.square("south", "vac")) {
                ei.move("south", 1);
            } else if (Y > 1 & ~ei.square("north", "obstacle") | ~ei.square("north", "vac")) {
                ei.move("north", 1);
            } else {
                ei.move("west", 1);
            }
        }
    }

    /* 
    Used when the forward cell is an obstacle.
    Checks if the the left and/or right cell of the bot in its current position is empty.
    It will prioritize going moving to the bot's right hand side unless there are some specific constraints
    that will force it to go left.
    */
    rule +!checkNextMove() : ei.location(int X, int Y) {
        if ((ei.square("left", "obstacle") | ei.square("left", "vac")) & (ei.square("right", "obstacle") | ei.square("right", "vac"))) {
            ei.move("back", 1);
        }

        if (Y == 0 & ei.direction("west") | (ei.square("forward", "obstacle") & ei.direcion("south") & ei.square("right", "obstacle"))) {
            !checkSide("left", "right");
        } else if (X == 0 & ei.direcion("south") | (ei.square("forward", "obstacle") & ei.direcion("south") & ei.square("left", "obstacle"))) {
            !checkSide("right", "left");
        } else {
            !checkSide("right", "left");
        }
        !update();
    }

    /*
    Since bots will prioritize going to its right hand side when there is an obstacle in front of it,
    this is a method that checks cases where the right side is an obstacle, then will it move to its left hand side instead.
    */
    rule +!checkSide(string Side1, string Side2) {
        if ((~ei.square(Side1, "obstacle") | (~ei.square(Side1, "vac")) & (ei.square(Side2, "obstacle") | ei.square(Side2, "vac")))) {
             ei.move(Side1, 1);
             !update();
             ei.move(Side2, 1);
        } else if ((ei.square(Side1, "obstacle") | (ei.square(Side1, "vac")) & (ei.square("forward", "obstacle") | ei.square("forward", "vac")))) {
            ei.move(Side2, 1);
            !update();
            ei.move(Side1, 1);
        } else !tryMove(Side1);

        !update();
    }

    /*
    Moves to its argument Direction if that square is not an obstacle or occupied by another vacuum bot.
    */
    rule +!tryMove(string Direction) {
        if ((~ei.square(Direction, "obstacle") | (~ei.square(Direction, "vac")))) {
            ei.move(Direction, 1);
            !update();
        }
    }

    /*
    Cleans the square/cell if it contains dirt. Also makes the system sleep to give agents time
    to have up to date information.
    */
    rule +!update() {
        ei.clean();
        S.sleep(500);
    }

	rule +!location() : ei.location(int X, int Y) {
		C.println(location(X, Y));
	}

	rule +!location() {
		C.println("Location error");
	}
}